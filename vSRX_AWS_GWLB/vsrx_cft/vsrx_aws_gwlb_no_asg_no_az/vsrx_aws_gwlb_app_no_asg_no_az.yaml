# Copyright (c) Juniper Networks, Inc., 2023. All rights reserved.

---
# Juniper Network vSRX cloud formation template to launch the following resources in AWS
#            * Creates a application VPC by taking the CIDR as params
#            * Creates a private and a public subnet
#            * Creates a GWLB endpoint in the public subnet
#            * Creates public/private route table

AWSTemplateFormatVersion: 2010-09-09
Description: | 
          Juniper Network vSRX cloud formation template to launch a application VPC with public, private and GWLBe subnet
          along with the GWLB endpoint and a bastion host one in public subnet, and one in private subnet

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "vSRX GWLB Application VPC Network Configuration"
        Parameters: 
          - VpcCidrP
          - UseAzP
          - Gwlbe1CidrP
          - Gwlbe2CidrP
          - PublicCidrP
          - PrivateCidrP
          - GwlbServiceNameP
      - Label:
          default: "Bastion Host(Jump Server) in public subnet"
        Parameters: 
          - BastionHostKeyPairP
          - BastionHostAmiIdP
          - BastionHostSgP
    
    ParameterLabels:
      # vSRX GWLB VPC Network Configuration Paramater Label
      VpcCidrP:
        default: "CIDR for the vSRX-GWLB application spoke VPC"
      UseAzP:
        default: "Select the AZ to use to create subnets and GWLB"
      Gwlbe1CidrP:
        default: "CIDR for the GWLBe subnet of Application spoke VPC(public-subnet)"
      Gwlbe2CidrP:
        default: "CIDR for the GWLBe subnet of Application spoke VPC(private-subnet)"
      PublicCidrP:
        default: "CIDR for the public subnet of vSRX-GWLB application spoke VPC"
      PrivateCidrP:
        default: "CIDR for the private subnet of vSRX-GWLB application spoke VPC"
      GwlbServiceNameP:
        default: "Service name of the gateway load balancer"
      # Bastion Host Paramater Label
      BastionHostKeyPairP:
        default: "Choose existing keypair to manage bastion host"
      BastionHostAmiIdP:
        default: "Provide the bastion instance AMI-ID"
      BastionHostSgP:
        default: "Provide a source IP address or CIDR to restrict the SSH access, the default is 0.0.0.0/0"
Parameters:
  VpcCidrP:
    Description: "Please specify the application VPC CIDR"
    Type: String
    Default: "10.10.0.0/16"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/((1[6-9])|(2[0-6])))
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/16-26 format"

  UseAzP:
    Description: "Please choose the availability zone"
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: "Select the valid Availability Zone"

  Gwlbe1CidrP:
    Description: "Please specify the CIDR for the GWLBe subnet of the application VPC for public subnets"
    Type: String
    Default: "10.10.0.0/25"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/((1[6-9])|(2[0-6])))
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/16-26 format"

  Gwlbe2CidrP:
    Description: "Please specify the CIDR for the GWLBe subnet of the application VPC for private subnets"
    Type: String
    Default: "10.10.0.128/25"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/((1[6-9])|(2[0-6])))
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/16-26 format"
  
  PublicCidrP:
    Description: "Please specify the CIDR for the public subnet of the application VPC "
    Type: String
    Default: "10.10.1.0/24"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/((1[6-9])|(2[0-6])))
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/16-26 format"
  
  PrivateCidrP:
    Description: "Please specify the CIDR for the private subnet of the application VPC"
    Type: String
    Default: "10.10.2.0/24"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/((1[6-9])|(2[0-6])))
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/16-26 format"

  GwlbServiceNameP:
    Description: "Please provide the service name for the gateway load balancer"
    Type: String

  BastionHostAmiIdP:
    Description: "Enter the AMI-ID for the bastion host"
    Type: String
    Default: ami-05fa00d4c63e32376 # ami-05fa00d4c63e32376 FreeTier linux in N Virginia
    AllowedPattern: (ami\-[a-zA-Z0-9-]+)
    ConstraintDescription: "Provide a valid ami ID for the bastion host"

  BastionHostKeyPairP:
    Description: "Choose the existing keypair for bastion host"
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: "Please select the existing keypair name to gain SSH access to the bastion host"

  BastionHostSgP:
    Description: "Provide the CIDR to allow the SSH traffic from outside to BastionHost"
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/\d{1,2})
    ConstraintDescription: "Please specify the valid IP address in x.x.x.x/x format"

Resources:
    VpcR:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VpcCidrP
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: "default"
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-vpc'
    
    IgwR:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-vpc-IGW'
    
    AttachIgwR:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VpcR
        InternetGatewayId: !Ref IgwR

    # Create subnets for Gwlbe1, Gwlbe2, public and private
    Gwlbe1SubnetR:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref UseAzP
        VpcId: !Ref VpcR
        CidrBlock: !Ref Gwlbe1CidrP
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-pub-Gwlbe-subnet'

    Gwlbe2SubnetR:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref UseAzP
        VpcId: !Ref VpcR
        CidrBlock: !Ref Gwlbe2CidrP
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-priv-Gwlbe-subnet'

    PublicSubnetR:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref UseAzP
        VpcId: !Ref VpcR
        CidrBlock: !Ref PublicCidrP
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-application-public-subnet'

    PrivateSubnetR:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Ref UseAzP
        VpcId: !Ref VpcR
        CidrBlock: !Ref PrivateCidrP
        MapPublicIpOnLaunch: false   
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-application-private-subnet'
    
    # Create a NAT gateway in Gwlbe1 which has route to IGW
    NatGwEipR:
      Type: AWS::EC2::EIP
      Properties: 
        Domain: vpc
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-natgw-eip'

    NatGwR:
      Type: AWS::EC2::NatGateway
      Properties: 
        AllocationId: !GetAtt NatGwEipR.AllocationId
        ConnectivityType: public
        SubnetId: !Ref Gwlbe1SubnetR
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-natgw'

    # Create Gwlbe in Gwlbe1 and Gwlbe2
    Gwlbe1EndPointR:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: !Ref GwlbServiceNameP
        SubnetIds: 
          - !Ref Gwlbe1SubnetR
        VpcEndpointType: "GatewayLoadBalancer"
        VpcId: !Ref VpcR
      DependsOn: 
        - "Gwlbe1RouteTableEgressEntryR"

    Gwlbe2EndPointR:
      Type: AWS::EC2::VPCEndpoint
      Properties: 
        ServiceName: !Ref GwlbServiceNameP
        SubnetIds: 
          - !Ref Gwlbe2SubnetR
        VpcEndpointType: "GatewayLoadBalancer"
        VpcId: !Ref VpcR
      DependsOn: 
        - "Gwlbe1RouteTableEgressEntryR"

    # Create Route tables and subnet associations
    GwlbeRouteTableIngressR:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-Gwlbe-route-ingress'
        VpcId: !Ref VpcR

    GwlbeIngressRouteIgwAssociationR:
      Type: AWS::EC2::GatewayRouteTableAssociation
      Properties: 
        GatewayId: !Ref IgwR
        RouteTableId: !Ref GwlbeRouteTableIngressR
      DependsOn:
        - AttachIgwR
        
    Gwlbe1RouteTableEgressR:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-Gwlbe-route-egress'
        VpcId: !Ref VpcR

    Gwlbe1SubnetEgressRouteAssociationR:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref Gwlbe1RouteTableEgressR
        SubnetId: !Ref Gwlbe1SubnetR

    Gwlbe2RouteTableEgressR:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-app-Gwlbe-route-egress'
        VpcId: !Ref VpcR
    
    Gwlbe2SubnetEgressRouteAssociationR:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref Gwlbe2RouteTableEgressR
        SubnetId: !Ref Gwlbe2SubnetR

    PublicRouteTableR:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-application-public-route'
        VpcId: !Ref VpcR

    PublicSubnetRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTableR
        SubnetId: !Ref PublicSubnetR

    PrivateRouteTableR:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-application-private-route'
        VpcId: !Ref VpcR

    PrivateSubnetRouteAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PrivateRouteTableR
        SubnetId: !Ref PrivateSubnetR

    # Add route table entries
    Gwlbe1RouteTableEgressEntryR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref Gwlbe1RouteTableEgressR
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref IgwR
      DependsOn: 
        - AttachIgwR
    
    Gwlbe2RouteTableEgressEntryR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref Gwlbe2RouteTableEgressR
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGwR
      DependsOn: 
        - AttachIgwR

    GwlbeRouteTableIngressEntryPubR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref GwlbeRouteTableIngressR
        DestinationCidrBlock: !Ref PublicCidrP
        VpcEndpointId: !Ref Gwlbe1EndPointR
    
    GwlbeRouteTableIngressEntryPrivR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref GwlbeRouteTableIngressR
        DestinationCidrBlock: !Ref PrivateCidrP
        VpcEndpointId: !Ref Gwlbe2EndPointR

    PublicRouteTableEntryR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PublicRouteTableR
        DestinationCidrBlock: 0.0.0.0/0
        VpcEndpointId: !Ref Gwlbe1EndPointR
    
    PrivateRouteTableEntryR:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTableR
        DestinationCidrBlock: 0.0.0.0/0
        VpcEndpointId: !Ref Gwlbe2EndPointR

    # SG for the bastion host in the Gwlbe1subnet
    BastionGwlbePublicSGR:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: "Security group for the Gwlbe1 and Public subnet of the vSRX application VPC"
        GroupName: !Sub '${AWS::StackName}-vSRX-bastion-host-gwlbe-pub-sg'
        VpcId: !Ref VpcR
        SecurityGroupEgress: 
          - CidrIp: 0.0.0.0/0
            Description: "Egress rule to allow everything"
            FromPort: -1
            IpProtocol: "-1"
            ToPort: -1
        SecurityGroupIngress: 
           - CidrIp: !Ref BastionHostSgP
             Description: "Ingress rule to allow SSH"
             FromPort: 22
             IpProtocol: tcp
             ToPort: 22

           - CidrIp: !Ref Gwlbe1CidrP
             Description: "Ingress rule to allow SSH"
             FromPort: 22
             IpProtocol: tcp
             ToPort: 22

           - CidrIp: !Ref PublicCidrP
             Description: "Ingress rule to allow everything"
             FromPort: -1
             IpProtocol: "-1"
             ToPort: -1
           - CidrIp: !Ref PrivateCidrP
             Description: "Ingress rule to allow everything"
             FromPort: -1
             IpProtocol: "-1"
             ToPort: -1
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-bastion-gwlbe-host-sg'
    
    BastionPrivateSGR:
      Type: AWS::EC2::SecurityGroup
      Properties: 
        GroupDescription: "Security group for the private subnet of the vSRX application VPC"
        GroupName: !Sub '${AWS::StackName}-vSRX-bastion-host-private-sg'
        VpcId: !Ref VpcR
        SecurityGroupEgress: 
          - CidrIp: 0.0.0.0/0
            Description: "Egress rule to allow everything"
            FromPort: -1
            IpProtocol: "-1"
            ToPort: -1
        SecurityGroupIngress: 
           - CidrIp: !Ref PublicCidrP
             Description: "Ingress rule to allow everything"
             FromPort: -1
             IpProtocol: "-1"
             ToPort: -1

           - CidrIp: !Ref PrivateCidrP
             Description: "Ingress rule to allow everything"
             FromPort: -1
             IpProtocol: "-1"
             ToPort: -1
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-bastion-private-host-sg'

    PublicBastionHostR:
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: !Ref UseAzP
        ImageId: !Ref BastionHostAmiIdP
        KeyName: !Ref BastionHostKeyPairP
        InstanceType: t2.micro
        SubnetId: !Ref PublicSubnetR
        SecurityGroupIds:
          - !Ref BastionGwlbePublicSGR
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-bastion-host-public-subnet'

    PrivateBastionHostR:
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: !Ref UseAzP
        ImageId: !Ref BastionHostAmiIdP
        KeyName: !Ref BastionHostKeyPairP
        InstanceType: t2.micro
        SubnetId: !Ref PrivateSubnetR
        SecurityGroupIds:
          - !Ref BastionPrivateSGR
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-bastion-host-private-subnet'
    
    GwlbeBastionHostR:
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: !Ref UseAzP
        ImageId: !Ref BastionHostAmiIdP
        KeyName: !Ref BastionHostKeyPairP
        InstanceType: t2.micro
        SubnetId: !Ref Gwlbe1SubnetR
        SecurityGroupIds:
          - !Ref BastionGwlbePublicSGR
        Tags: 
          - Key: "Name"
            Value: !Sub '${AWS::StackName}-vSRX-bastion-host-gwlbe-subnet'
...