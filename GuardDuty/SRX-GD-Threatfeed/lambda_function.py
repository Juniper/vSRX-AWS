#  Copyright Â©  2020 Juniper Networks, Inc., All Rights Reserved.

"""Extracts remote IPs from GuardDuty events and writes them to configured
S3 file or send to SkyATP using Open API's
"""
import logging
import time

from gd_threatfeed import constants as const
from gd_threatfeed import utils
from gd_threatfeed import s3_utils
from gd_threatfeed import feed_utils
from gd_threatfeed import errors
from gd_threatfeed.openapi_client import OpenAPIClient

__author__ = 'Juniper Networks'


def _log_response_message(status: int, resp: dict):
    if status == 429:
        logging.warning('Too many requests in a given amount of time, API '
                        'quota exceeded')
    elif status == 202:
        logging.info('Successfully sent request to OpenAPI and response '
                     'is : %s', resp)
    else:
        logging.error('Failed to process the feed content status code %d and '
                      'response %s', status, resp)


def lambda_handler(event, _):
    """
    Lambda handler for events generated by Guardduty
    """
    log = logging.getLogger()
    log.setLevel(logging.INFO)
    log.debug("Received event: %s", event)
    start_ts = int(time.time())
    log.info(" Startedfeed processing for event with finding id %s",
             event['detail']['id'])

    action_info = event['detail']['service']['action']
    path, ftype = const.ACTIONS_PATH.get(action_info['actionType'])

    conf = utils.get_lambda_config()
    conf['feed_type'] = ftype

    if not utils.validate_args(conf) or not utils.validate_event(event, ftype,
                                                                 conf):
        log.error("Skipping to process the feed due to specified config")
        return

    res = utils.get_event_details(action_info, path, ftype)
    if not res:
        log.info("Skipping to process the feed as feed content is empty")
        return

    if conf.get('base_url', None):
        log.info("Configured Lambda to send feed to SkyATP")
        try:
            client = OpenAPIClient(base_url=conf['base_url'],
                                   token=conf['token'])
            body = '\n'.join(['{},{}'.format(v[1], v[-1]) for v in res])
            if ftype == const.IP_ADDR and conf['ip_feed'] and body:
                resp, status = client.upload_custom_feed(
                    feed_type=const.IP_FEED, feed_name=conf['ip_feed'],
                    feed_content=body)
                _log_response_message(status, resp)

            elif ftype == const.DOMAIN and conf['dns_feed'] and body:
                resp, status = client.upload_custom_feed(
                    feed_type=const.DNS_FEED, feed_name=conf['dns_feed'],
                    feed_content=body)
                _log_response_message(status, resp)

            else:
                raise errors.CloudFeedsError('Invalid params')
        except errors.CloudFeedsError as err:
            log.error("Failed to upload feed to SkyATP with error : %s", str(err))
    else:
        log.info("Configured Lambda to send feed to customer S3 bucket")
        try:
            if conf['ip_feed'] and conf['dns_feed']:
                ips, dns = (res, set()) if ftype == const.IP_ADDR else (set(),
                                                                        res)
                ip_feed = feed_utils.publish_object(category='CC',
                                                    feed_name=conf['ip_feed'],
                                                    feed_type=const.IP_ADDR,
                                                    in_data=ips,
                                                    conf=conf)
                dns_feed = feed_utils.publish_object(category='CC',
                                                     feed_name=conf['dns_feed'],
                                                     feed_type=const.DOMAIN,
                                                     in_data=dns,
                                                     conf=conf)
                feeds = [ip_feed, dns_feed]
            else:
                fname = conf['ip_feed'] or conf['dns_feed']
                ftype = const.IP_ADDR if const.IP_FEED else const.DOMAIN
                feed = feed_utils.publish_object(category='CC', feed_name=fname,
                                                 feed_type=ftype, in_data=res,
                                                 conf=conf)
                feeds = [feed]
            manifest_xml = feed_utils.create_manifest(feeds, conf)
            s3_utils.upload_data_to_s3(conf['bucket'],
                                       manifest_xml, const.MANIFEST_FILE_NAME)
        except errors.CloudFeedsError as err:
            log.error("Failed to upload feed to customer S3 bucket with "
                      "error : %s", str(err))
    log.info("Completed feed processing for event with finding id %s and time "
             "taken to process the feed %d seconds", event['detail']['id'],
             int(time.time()) - start_ts)
